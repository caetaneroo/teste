# ✅ VALIDAÇÃO ESPECÍFICA PARA AsyncIaraGenAI
def _validate_iara_api_params(self, api_params: Dict[str, Any]) -> Dict[str, Any]:
    """
    Valida parâmetros específicos para AsyncIaraGenAI
    """
    validation_result = {
        'valid': True,
        'errors': [],
        'warnings': []
    }
    
    # Verificar se o modelo é suportado pela AsyncIaraGenAI
    supported_models = [
        'gpt-35-turbo', 'gpt-35-turbo-16k', 'gpt-4', 'gpt-4-32k',
        'gpt-4-turbo', 'gpt-4o', 'gpt-4o-mini'
    ]
    
    model = api_params.get('model', '')
    if model not in supported_models:
        validation_result['warnings'].append(f'Modelo {model} pode não ser suportado pela AsyncIaraGenAI')
    
    # Verificar estrutura das mensagens
    messages = api_params.get('messages', [])
    for i, msg in enumerate(messages):
        if not isinstance(msg, dict):
            validation_result['errors'].append(f'Mensagem {i} deve ser um dicionário')
            continue
            
        if 'role' not in msg:
            validation_result['errors'].append(f'Mensagem {i} deve ter "role"')
            
        if 'content' not in msg:
            validation_result['errors'].append(f'Mensagem {i} deve ter "content"')
            
        # Verificar roles válidos
        valid_roles = ['system', 'user', 'assistant']
        if msg.get('role') not in valid_roles:
            validation_result['errors'].append(f'Mensagem {i} tem role inválido: {msg.get("role")}')
    
    if validation_result['errors']:
        validation_result['valid'] = False
    
    return validation_result
