# core/stats_manager.py
import time
from dataclasses import dataclass, field
from typing import Dict, Any, Optional, List

@dataclass
class Stats:
    """Classe única para qualquer tipo de estatística"""
    total_requests: int = 0
    successful_requests: int = 0
    failed_requests: int = 0
    total_tokens_input: int = 0
    total_tokens_output: int = 0
    total_cost: float = 0.0
    rate_limit_waits: int = 0
    processing_time: float = 0.0
    start_time: float = field(default_factory=time.time)
    
    @property
    def total_tokens(self) -> int:
        return self.total_tokens_input + self.total_tokens_output
    
    @property
    def success_rate(self) -> float:
        return (self.successful_requests / self.total_requests * 100) if self.total_requests > 0 else 0
    
    @property
    def avg_rate(self) -> float:
        return (self.successful_requests / self.processing_time) if self.processing_time > 0 else 0

class StatsManager:
    """Gerenciador único que serve batch e global"""
    
    def __init__(self):
        self.global_stats = Stats()
        self._batch_snapshots = {}
    
    def start_batch(self, batch_id: str) -> None:
        """Inicia tracking de um batch"""
        self._batch_snapshots[batch_id] = {
            'start_time': time.time(),
            'start_stats': Stats(
                total_requests=self.global_stats.total_requests,
                successful_requests=self.global_stats.successful_requests,
                failed_requests=self.global_stats.failed_requests,
                total_tokens_input=self.global_stats.total_tokens_input,
                total_tokens_output=self.global_stats.total_tokens_output,
                total_cost=self.global_stats.total_cost,
                rate_limit_waits=self.global_stats.rate_limit_waits
            )
        }
    
    def end_batch(self, batch_id: str) -> Stats:
        """Finaliza batch e retorna stats apenas desse batch"""
        if batch_id not in self._batch_snapshots:
            raise ValueError(f"Batch {batch_id} não foi iniciado")
        
        snapshot = self._batch_snapshots[batch_id]
        start_stats = snapshot['start_stats']
        end_time = time.time()
        
        # Calcular diferença = stats apenas deste batch
        batch_stats = Stats(
            total_requests=self.global_stats.total_requests - start_stats.total_requests,
            successful_requests=self.global_stats.successful_requests - start_stats.successful_requests,
            failed_requests=self.global_stats.failed_requests - start_stats.failed_requests,
            total_tokens_input=self.global_stats.total_tokens_input - start_stats.total_tokens_input,
            total_tokens_output=self.global_stats.total_tokens_output - start_stats.total_tokens_output,
            total_cost=self.global_stats.total_cost - start_stats.total_cost,
            rate_limit_waits=self.global_stats.rate_limit_waits - start_stats.rate_limit_waits,
            processing_time=end_time - snapshot['start_time'],
            start_time=snapshot['start_time']
        )
        
        # Limpar snapshot
        del self._batch_snapshots[batch_id]
        
        return batch_stats
    
    def record_request(self, success: bool, tokens_input: int = 0, 
                      tokens_output: int = 0, cost: float = 0.0) -> None:
        """Registra uma requisição nas stats globais"""
        self.global_stats.total_requests += 1
        
        if success:
            self.global_stats.successful_requests += 1
        else:
            self.global_stats.failed_requests += 1
        
        self.global_stats.total_tokens_input += tokens_input
        self.global_stats.total_tokens_output += tokens_output
        self.global_stats.total_cost += cost
    
    def record_rate_limit(self) -> None:
        """Registra uma espera por rate limit"""
        self.global_stats.rate_limit_waits += 1
    
    def get_global_stats(self) -> Stats:
        """Retorna stats globais"""
        self.global_stats.processing_time = time.time() - self.global_stats.start_time
        return self.global_stats
    
    def format_stats(self, stats: Stats, title: str = "Stats") -> str:
        """Formata qualquer stats de forma consistente"""
        return f"""📊 {title.upper()}:
   ✅ Sucessos: {stats.successful_requests}
   ❌ Falhas: {stats.failed_requests}
   🔢 Tokens: {stats.total_tokens:,}
   💰 Custo: ${stats.total_cost:.4f}
   ⏱️ Tempo: {stats.processing_time:.2f}s
   📈 Taxa: {stats.avg_rate:.2f} req/s
   📊 Sucesso: {stats.success_rate:.1f}%{f'
   ⏳ Rate limits: {stats.rate_limit_waits}' if stats.rate_limit_waits > 0 else ''}"""
    
    def reset_global(self) -> None:
        """Reset stats globais"""
        self.global_stats = Stats()
